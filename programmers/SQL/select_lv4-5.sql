-- 오프라인/온라인 판매 데이터 통합하기
SELECT DATE_FORMAT(SALES_DATE, '%Y-%m-%d') AS SALES_DATE, PRODUCT_ID, USER_ID, SALES_AMOUNT
    FROM ONLINE_SALE
    WHERE MONTH(SALES_DATE) = 3
UNION
SELECT DATE_FORMAT(SALES_DATE, '%Y-%m-%d') AS SALES_DATE, PRODUCT_ID, NULL AS USER_ID, SALES_AMOUNT
    FROM OFFLINE_SALE
    WHERE MONTH(SALES_DATE) = 3
ORDER BY SALES_DATE, PRODUCT_ID, USER_ID;

-- 서울에 위치한 식당 목록 출력하기
SELECT I.REST_ID, I.REST_NAME, I.FOOD_TYPE, I.FAVORITES, I.ADDRESS, ROUND(AVG(R.REVIEW_SCORE), 2) AS SCORE
    FROM REST_INFO I, REST_REVIEW R
    WHERE I.REST_ID=R.REST_ID AND I.ADDRESS LIKE '서울%'
    GROUP BY REST_ID
    ORDER BY 6 DESC, 4 DESC;

-- 멸종위기의 대장균 찾기
WITH RECURSIVE TMP AS (
    -- 초기 쿼리 - 1세대 대장균
    SELECT ID, PARENT_ID, 1 AS GENERATION
    FROM ECOLI_DATA
    WHERE PARENT_ID IS NULL
    UNION ALL
    -- 재귀 쿼리 - 다음 세대 대장균
    SELECT E.ID, E.PARENT_ID, TMP.GENERATION + 1
    FROM TMP
    JOIN ECOLI_DATA E ON TMP.ID=E.PARENT_ID
)

SELECT COUNT(*) COUNT, GENERATION
FROM TMP
WHERE ID NOT IN (
    SELECT DISTINCT PARENT_ID
    FROM TMP
    WHERE PARENT_ID IS NOT NULL
)
GROUP BY GENERATION
ORDER BY 2
/* 
- WITH RECURSIVE : 자기자신을 참조하는 재귀 쿼리
*/